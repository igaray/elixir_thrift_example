%%
%% Autogenerated by Thrift Compiler (0.10.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(example_types).

-include("example_types.hrl").

-export([struct_info/1, struct_info_ext/1, enum_info/1, enum_names/0, struct_names/0, exception_names/0]).

struct_info('Envelope') ->
  {struct, [{1, i32},
          {2, {struct, {'example_types', 'Payload'}}}]}
;

struct_info('Payload') ->
  {struct, [{1, {struct, {'example_types', 'Request1'}}},
          {2, {struct, {'example_types', 'Request2'}}},
          {3, {struct, {'example_types', 'Message1'}}}]}
;

struct_info('Request1') ->
  {struct, [{1, string}]}
;

struct_info('Response1') ->
  {struct, [{1, i32},
          {2, string}]}
;

struct_info('Request2') ->
  {struct, [{1, i64}]}
;

struct_info('Response2') ->
  {struct, [{1, i32},
          {2, i64}]}
;

struct_info('Message1') ->
  {struct, [{1, i64}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Envelope') ->
  {struct, [{1, required, i32, 'type', undefined},
          {2, required, {struct, {'example_types', 'Payload'}}, 'payload', undefined}]}
;

struct_info_ext('Payload') ->
  {struct, [{1, optional, {struct, {'example_types', 'Request1'}}, 'r1', undefined},
          {2, optional, {struct, {'example_types', 'Request2'}}, 'r2', undefined},
          {3, optional, {struct, {'example_types', 'Message1'}}, 'm1', undefined}]}
;

struct_info_ext('Request1') ->
  {struct, [{1, required, string, 'data', undefined}]}
;

struct_info_ext('Response1') ->
  {struct, [{1, required, i32, 'result', undefined},
          {2, required, string, 'data', undefined}]}
;

struct_info_ext('Request2') ->
  {struct, [{1, required, i64, 'data', undefined}]}
;

struct_info_ext('Response2') ->
  {struct, [{1, required, i32, 'result', undefined},
          {2, required, i64, 'data', undefined}]}
;

struct_info_ext('Message1') ->
  {struct, [{1, required, i64, 'data', undefined}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

struct_names() ->
  ['Envelope', 'Payload', 'Request1', 'Response1', 'Request2', 'Response2', 'Message1'].

enum_info('Error') ->
  [
    {'NONE', 0},
    {'ERROR1', 1},
    {'ERROR2', 2}
  ];

enum_info('MessageType') ->
  [
    {'REQUEST1', 0},
    {'RESPONSE1', 1},
    {'REQUEST2', 2},
    {'RESPONSE2', 3},
    {'MESSAGE1', 4}
  ];

enum_info(_) -> erlang:error(function_clause).

enum_names() ->
  ['Error', 'MessageType'].

exception_names() ->
  [].

